# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
library(shinydashboardPlus)
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
library(stringi)
stri_rand_lipsum(2)
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
case_study<-sf::st_read("R/base_nuts/case_stud.shp")%>%dplyr::filter(NUTS_ID == "NO060" | NUTS_ID =="FRI12" | NUTS_ID=="SK010")
library(dplyr)
case_study<-sf::st_read("R/base_nuts/case_stud.shp")%>%dplyr::filter(NUTS_ID == "NO060" | NUTS_ID =="FRI12" | NUTS_ID=="SK010")
mapview(case_study)
mapview::mapview(case_study)
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
library(leaflet)
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
install.packages("visNetwork")
###### display a network result
visNetwork(nodes, links, width="100%", height="400px")
library('visNetwork')
###### display a network result
visNetwork(nodes, links, width="100%", height="400px")
nodes <- data.frame(id = 1:10,
# add labels on nodes
label = paste("Node", 1:10),
# add groups on nodes
group = c("GrA", "GrB"),
# size adding value
value = 1:10,
# control shape of nodes
shape = c("square", "triangle", "box", "circle", "dot", "star",
"ellipse", "database", "text", "diamond"),
# tooltip (html or character), when the mouse is above
title = paste0("<p><b>", 1:10,"</b><br>Node !</p>"),
# color
color = c("darkred", "grey", "orange", "darkblue", "purple"),
# shadow
shadow = c(FALSE, TRUE, FALSE, TRUE, TRUE))
edges <- data.frame(from = c(1,2,5,7,8,10), to = c(9,3,1,6,4,7))
visNetwork(nodes, links, width="100%", height="400px")
visNetwork(nodes, edges, height = "500px", width = "100%")
# minimal example
nodes <- data.frame(id = 1:3)
edges <- data.frame(from = c(1,2), to = c(1,3))
View(edges)
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
edges <- data.frame(from = sample(1:nnodes, nnedges, replace = T),
to = sample(1:nnodes, nnedges, replace = T),
value = rnorm(nnedges, 10), label = paste("Edge", 1:nnedges),
title = paste0("<p>", 1:nnedges,"<br>Edge Tooltip !</p>"))
# minimal example
nnodes <- 40
edges <- data.frame(from = sample(1:nnodes, nnedges, replace = T),
to = sample(1:nnodes, nnedges, replace = T),
value = rnorm(nnedges, 10), label = paste("Edge", 1:nnedges),
title = paste0("<p>", 1:nnedges,"<br>Edge Tooltip !</p>"))
nnedges <- 100
edges <- data.frame(from = sample(1:nnodes, nnedges, replace = T),
to = sample(1:nnodes, nnedges, replace = T),
value = rnorm(nnedges, 10), label = paste("Edge", 1:nnedges),
title = paste0("<p>", 1:nnedges,"<br>Edge Tooltip !</p>"))
View(edges)
nodes <- data.frame(id = 1:nnodes,
label = paste("Label", 1:nnodes),
group = sample(LETTERS[1:3], nnodes, replace = TRUE), value = 1:nnodes,
title = paste0("<p>", 1:nnodes,"<br>Tooltip !</p>"), stringsAsFactors = FALSE)
View(nodes)
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
install.packages("wdpar")
library(wdpar)
rappdirs::user_data_dir("wdpar")
no_raw_pa_data <- wdpa_fetch("Norway", wait = TRUE,
download_dir = rappdirs::user_data_dir("wdpar"))
no_raw_pa_data <- wdpa_fetch("Norway", wait = TRUE,
download_dir = "P:/312204_pareus/WP_4/pca_landscape_data")
if (!require(remotes))
install.packages("remotes")
remotes::install_github("dickoa/prepr")
install.packages("curl")
install.packages("curl")
install.packages("wdpar", repos = "https://cran.rstudio.com/")
library(wdpar)
library(curl)
library(sf)
no_raw_pa_data <- wdpa_fetch("NOR", wait = TRUE,
download_dir = "P:/312204_pareus/WP_4/pca_landscape_data")
webdriver::install_phantomjs()
no_raw_pa_data <- wdpa_fetch("NOR", wait = TRUE,
download_dir = "P:/312204_pareus/WP_4/pca_landscape_data")
# clean Malta data
no_pa_data <- wdpa_clean(no_raw_pa_data)
no_raw_pa_data <- wdpa_fetch("FRA", wait = TRUE,
download_dir = "P:/312204_pareus/WP_4/pca_landscape_data")
# clean Malta data
no_pa_data <- wdpa_clean(no_raw_pa_data)
library(dplyr)
no_raw_pa_data <- wdpa_fetch("FRA", wait = TRUE,
download_dir = "P:/312204_pareus/WP_4/pca_landscape_data")
no_raw_pa_data <- wdpa_fetch("NOR", wait = TRUE,
download_dir = "P:/312204_pareus/WP_4/pca_landscape_data")
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
install.packages("giscoR",
repos = c("https://ropengov.r-universe.dev", "https://cloud.r-project.org")
)
library(giscoR)
library(sf)
library(dplyr)
gisco_get_communes( year = "2016",
epsg = "4326",
cache = TRUE,
update_cache = FALSE,
cache_dir = NULL,
verbose = FALSE,
country = "Norway")
nor<-gisco_get_communes( year = "2016",
epsg = "4326",
cache = TRUE,
update_cache = FALSE,
cache_dir = NULL,
verbose = FALSE,
country = "Norway")
nor<-gisco_get_communes( year = "2016",
epsg = "4326",
cache = TRUE,
update_cache = TRUE,
cache_dir = NULL,
verbose = FALSE,
country = "Norway")
plot(nor)
nor_3<-gisco_get_nuts(
year = "2016",
epsg = "4326",
cache = TRUE,
update_cache = FALSE,
cache_dir = NULL,
verbose = FALSE,
resolution = "20",
spatialtype = "RG",
country = "Norway",
nuts_id = NULL,
nuts_level = "3"
)
plot(nor_3)
View(nor_3)
View(nor)
## first select country(ies)
cnt<-gisco_get_nuts(
year = "2016",
epsg = "4326",
cache = TRUE,
update_cache = FALSE,
cache_dir = NULL,
verbose = FALSE,
resolution = "50",
spatialtype = "RG",
country = NULL,
nuts_id = NULL,
nuts_level = "0"
)
## first select country(ies)
cnt<-gisco_get_nuts(
year = "2016",
epsg = "4326",
cache = TRUE,
update_cache = FALSE,
cache_dir = NULL,
verbose = FALSE,
resolution = "60",
spatialtype = "RG",
country = NULL,
nuts_id = NULL,
nuts_level = "0"
)
plot(cnt)
cnt_sel<-c("NL","NO")
## select nuts 3 level per cntry
nuts_3_sel<-gisco_get_nuts(
year = "2016",
epsg = "4326",
cache = TRUE,
update_cache = FALSE,
cache_dir = NULL,
verbose = FALSE,
resolution = "60",
spatialtype = "RG",
country = NULL,
nuts_id = cnt_sel,
nuts_level = "3"
)
View(nuts_3_sel)
View(cnt)
## select nuts 3 level per cntry
nuts_3_sel<-gisco_get_nuts(
year = "2016",
epsg = "4326",
cache = TRUE,
update_cache = FALSE,
cache_dir = NULL,
verbose = FALSE,
resolution = "60",
spatialtype = "RG",
country = cnt_sel,
nuts_id = NULL,
nuts_level = "3"
)
View(nuts_3_sel)
plot(nuts_3_sel)
nor<-gisco_get_communes( year = "2016",
epsg = "4326",
cache = TRUE,
update_cache = TRUE,
cache_dir = NULL,
verbose = FALSE,
country = cnt_sel)
View(nor)
View(nuts_3_sel)
nor<-gisco_get_communes( year = "2016",
epsg = "4326",
cache = TRUE,
update_cache = TRUE,
cache_dir = NULL,
verbose = FALSE,
country = "Switzerland")
View(nor)
cnt_sel<-c("CH")
## select nuts 3 level per cntry
nuts_3_sel<-gisco_get_nuts(
year = "2016",
epsg = "4326",
cache = TRUE,
update_cache = FALSE,
cache_dir = NULL,
verbose = FALSE,
resolution = "60",
spatialtype = "RG",
country = cnt_sel,
nuts_id = NULL,
nuts_level = "3"
)
plot(nuts_3_sel)
nuts_3_sel_fin<-c("CH021","CH051")
nor<-gisco_get_communes( year = "2016",
epsg = "4326",
cache = TRUE,
update_cache = TRUE,
cache_dir = NULL,
verbose = FALSE,
country = cnt_sel)%>%filter(NUTS_CODE %in% nuts_3_sel_fin)
View(nor)
View(nuts_3_sel)
library(wdpar)
library(curl)
library(sf)
library(dplyr)
no_raw_pa_data <- wdpa_fetch(c("NOR","SVK"), wait = TRUE,
download_dir = NULL)
